# ==============================================================================
# EVS Next.js Basic Web - Environment Configuration
# ==============================================================================
# Version: 1.8.0
# Last Updated: 2025-10-11
# Documentation: See ENV_VALIDATION_REPORT.md for complete details
#
# IMPORTANT: This file serves as a template. Copy to .env.local for development
#            and configure environment variables in your hosting platform for production.
#
# Build Strategy: As of v1.6.3+, all variables are optional at build time.
#                 Critical integrations are validated at runtime for stability.
# ==============================================================================

# ==============================================================================
# CORE CONFIGURATION
# ==============================================================================

# Application environment (development | production | test)
# Default: development
NODE_ENV=development

# EVS-specific mode (development | production)
# Default: development
EVS_MODE=development

# Enable admin features (true | false)
# Default: false
# EVS_ENABLE_ADMIN=false

# ==============================================================================
# SMTP / EMAIL CONFIGURATION
# ==============================================================================
# Required for: Contact form (/api/contact, /api/mail/relay), License emails (/api/license/issue)
# Runtime behavior: Returns 503 if not configured when endpoints are accessed
#
# Example SMTP providers:
# - Gmail: smtp.gmail.com (Port 465 or 587)
# - SendGrid: smtp.sendgrid.net (Port 587)
# - Amazon SES: email-smtp.region.amazonaws.com (Port 465 or 587)
# - Mailgun: smtp.mailgun.org (Port 587)
# - Custom: Your own SMTP server
# ==============================================================================

# SMTP server hostname
# SMTP_HOST=smtp.example.com

# SMTP server port (typically 465 for SSL, 587 for TLS)
# SMTP_PORT=465

# Use TLS/SSL encryption (true | false)
# SMTP_SECURE=true

# SMTP authentication username (usually your email address)
# SMTP_USER=info@example.com

# SMTP authentication password
# Security: NEVER commit this to git. Use environment variables in production.
# SMTP_PASS=your_secure_password_here

# Override recipient email for contact form (optional)
# Default: Uses SMTP_USER if not set
# MAIL_TO=contact@example.com

# Override sender email for outgoing messages (optional)
# Default: Uses SMTP_USER if not set
# MAIL_FROM=noreply@example.com

# ==============================================================================
# PAYPAL PAYMENT INTEGRATION
# ==============================================================================
# Required for: Payment processing (/api/paypal/create-order, /api/paypal/capture-order)
# Runtime behavior: Returns 503 if not configured when endpoints are accessed
#
# Setup:
# 1. Create PayPal Developer account: https://developer.paypal.com
# 2. Create REST API app in sandbox/live environment
# 3. Copy Client ID and Client Secret
# 4. Test in sandbox mode before switching to live
# ==============================================================================

# PayPal REST API Client ID
# PAYPAL_CLIENT_ID=your_client_id_here

# PayPal REST API Client Secret
# Security: NEVER commit this to git. Use environment variables in production.
# PAYPAL_CLIENT_SECRET=your_client_secret_here

# PayPal environment mode (sandbox | live)
# Default: sandbox
# PAYPAL_MODE=sandbox

# ==============================================================================
# LICENSE SYSTEM CONFIGURATION
# ==============================================================================
# Required for: License generation and validation (/api/license/issue, /api/license/validate)
# Runtime behavior: Returns 503 if not configured when endpoints are accessed
#
# License System Features:
# - Cryptographic license key generation
# - Email delivery with branding
# - Redis storage for validation
# - JWT-based secure downloads
# - Invoice generation (PDF)
# ==============================================================================

# Cryptographic salt for license hashing (32+ random characters recommended)
# Security: Generate with: openssl rand -base64 32
# LICENSE_SALT=your_secure_random_salt_32_chars_minimum

# Email sender for license delivery
# Default: info@evervibestudios.com
# LICENSE_EMAIL_SENDER=info@example.com

# Single license price in EUR
# Default: 29.00
# LICENSE_SINGLE_PRICE=29.00

# Agency license price in EUR
# Default: 79.00
# LICENSE_AGENCY_PRICE=79.00

# JWT secret for download token generation (32+ random characters recommended)
# Security: Generate with: openssl rand -base64 32
# Used for secure file download authentication
# LICENSE_JWT_SECRET=your_secure_jwt_secret_32_chars_minimum

# ==============================================================================
# REDIS / UPSTASH CONFIGURATION
# ==============================================================================
# Required for: License storage and retrieval
# Runtime behavior: License operations fail gracefully if not configured
#
# Setup (Free Tier Available):
# 1. Create Upstash account: https://upstash.com
# 2. Create Redis database (recommended: eu-central-1 for GDPR compliance)
# 3. Copy REST URL and Token from dashboard
# 4. Configure eviction policy: Disable automatic deletion
# ==============================================================================

# Upstash Redis REST API URL
# UPSTASH_REDIS_REST_URL=https://your-db.upstash.io

# Upstash Redis REST API Token
# Security: NEVER commit this to git. Use environment variables in production.
# UPSTASH_REDIS_REST_TOKEN=your_token_here

# ==============================================================================
# SECURITY & RATE LIMITING
# ==============================================================================
# Contact form protection and spam prevention
# ==============================================================================

# Rate limit time window (e.g., '5m', '1h')
# Default: 5m
# CONTACT_RATE_LIMIT_WINDOW=5m

# Maximum requests per time window
# Default: 3
# CONTACT_RATE_LIMIT_MAX=3

# Minimum message length for contact form
# Default: 5
# CONTACT_MIN_MESSAGE_LENGTH=5

# Enable/disable rate limiting (true | false)
# Default: true
# ENABLE_RATE_LIMIT=true

# Enable SMTP debug logging (true | false)
# Default: false
# Warning: Only enable in development, exposes sensitive data
# ENABLE_SMTP_LOGGING=false

# ==============================================================================
# MONITORING & ALERTS (Optional)
# ==============================================================================
# Health check monitoring with Discord/Slack webhook notifications
# Used by: scripts/healthCheck.ts and .github/workflows/health-check.yml
# ==============================================================================

# Discord webhook URL for health alerts
# Setup: Discord Server → Server Settings → Integrations → Webhooks
# DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your_webhook_here

# Slack webhook URL for health alerts
# Setup: Slack Workspace → Apps → Incoming Webhooks
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/your_webhook_here

# ==============================================================================
# DEPLOYMENT NOTES
# ==============================================================================
#
# VERCEL DEPLOYMENT:
# 1. Project Settings → Environment Variables
# 2. Add required variables based on features you need
# 3. Build succeeds even with minimal configuration
# 4. Features return 503 at runtime if configuration is missing
#
# RENDER DEPLOYMENT:
# 1. Service → Environment tab
# 2. Add environment variables individually
# 3. Supports encrypted variables for secrets
#
# VPS / DOCKER DEPLOYMENT:
# 1. Create .env.production file (DO NOT commit to git)
# 2. Copy this template and fill in production values
# 3. Ensure file permissions: chmod 600 .env.production
# 4. Load in startup script or docker-compose.yml
#
# ==============================================================================
# SECURITY BEST PRACTICES
# ==============================================================================
#
# ✅ DO:
# - Use strong, random values for secrets (32+ characters)
# - Generate unique values per environment (dev/staging/prod)
# - Rotate credentials regularly (every 90 days recommended)
# - Use environment variables in CI/CD platforms
# - Enable 2FA on all service accounts
# - Review access logs periodically
#
# ❌ DON'T:
# - Commit .env.local or .env.production to git
# - Share credentials via email or messaging apps
# - Reuse the same secrets across projects
# - Use default or example values in production
# - Store credentials in plain text files on servers
#
# ==============================================================================
# VALIDATION & TESTING
# ==============================================================================
#
# Test your configuration:
# 1. SMTP: pnpm run test:mailer (see scripts/testMailer.ts)
# 2. License: pnpm run test:license (see scripts/testLicense.ts)
# 3. Health: pnpm tsx scripts/healthCheck.ts
# 4. Build: pnpm build (should always succeed regardless of config)
#
# ==============================================================================
# SUPPORT & DOCUMENTATION
# ==============================================================================
#
# - Full Documentation: See ENV_VALIDATION_REPORT.md
# - Quick Start Guides: See docs/QUICK_START_*.md
# - Deployment Guides: See docs/DEPLOYMENT_*.md
# - Repository: https://github.com/evervibe/evs-next-basic-web
# - Support: info@evervibestudios.com
#
# ==============================================================================
